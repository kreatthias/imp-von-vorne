// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Matze {
    using Matze;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.ECS.APIs;
    using uFrame.ECS.Components;
    using uFrame.ECS.Systems;
    using uFrame.Kernel;
    using UniRx;
    using UnityEngine;
    
    
    public partial class DamageSystemBase : uFrame.ECS.Systems.EcsSystem {
        
        private IEcsComponentManagerOf<Health> _HealthManager;
        
        private IEcsComponentManagerOf<Orc> _OrcManager;
        
        private IEcsComponentManagerOf<Sword> _SwordManager;
        
        private IEcsComponentManagerOf<Shield> _ShieldManager;
        
        private DamageSystemOrcClickedHandler DamageSystemOrcClickedHandlerInstance = new DamageSystemOrcClickedHandler();
        
        public IEcsComponentManagerOf<Health> HealthManager {
            get {
                return _HealthManager;
            }
            set {
                _HealthManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Orc> OrcManager {
            get {
                return _OrcManager;
            }
            set {
                _OrcManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Sword> SwordManager {
            get {
                return _SwordManager;
            }
            set {
                _SwordManager = value;
            }
        }
        
        public IEcsComponentManagerOf<Shield> ShieldManager {
            get {
                return _ShieldManager;
            }
            set {
                _ShieldManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            HealthManager = ComponentSystem.RegisterComponent<Health>(3);
            OrcManager = ComponentSystem.RegisterGroup<OrcGroup,Orc>();
            SwordManager = ComponentSystem.RegisterComponent<Sword>(1);
            ShieldManager = ComponentSystem.RegisterComponent<Shield>(2);
            this.OnEvent<Matze.OrcClicked>().Subscribe(_=>{ DamageSystemOrcClickedFilter(_); }).DisposeWith(this);
        }
        
        protected virtual void DamageSystemOrcClickedHandler(Matze.OrcClicked data, Health clickedorc) {
            var handler = DamageSystemOrcClickedHandlerInstance;
            handler.System = this;
            handler.Event = data;
            handler.clickedOrc = clickedorc;
            StartCoroutine(handler.Execute());
        }
        
        protected void DamageSystemOrcClickedFilter(Matze.OrcClicked data) {
            var clickedOrcHealth = HealthManager[data.clickedOrc];
            if (clickedOrcHealth == null) {
                return;
            }
            if (!clickedOrcHealth.Enabled) {
                return;
            }
            this.DamageSystemOrcClickedHandler(data, clickedOrcHealth);
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("c67d304c-3dd9-4d05-9aa1-6413ce79355e")]
    public partial class DamageSystem : DamageSystemBase {
        
        private static DamageSystem _Instance;
        
        public DamageSystem() {
            Instance = this;
        }
        
        public static DamageSystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
